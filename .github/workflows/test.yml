name: Rust

on:
  pull_request:
    branches:
    - master
  
jobs:
  check:
    name: Cargo Check on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]       
    steps:
    - uses: actions/checkout@v1
    - name: cargo check
      run: cargo check
        
  test:
    name: Cargo Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]     
    steps:
    - uses: actions/checkout@v1
    - name: cargo test
      run: cargo test --release -- --nocapture
     
  examples:
    name: Example Tests
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - run: |
          pushd examples/playground &&
          cargo check &&
          popd &&
          pushd examples/crdt_merge_store &&
          cargo check &&
          popd &&
          pushd crates/sled &&
          echo "testing sled doctests" &&
          cargo test &&
          popd &&
          pushd crates/pagecache &&
          echo "testing pagecache doctests" &&
          cargo test

  cross-compile:
    name: Cross Compile
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - run: |
          echo "cross build" &&
          rustup target add aarch64-fuchsia &&
          rustup target add aarch64-linux-android &&
          rustup target add i686-linux-android &&
          rustup target add i686-unknown-linux-gnu &&
          rustup target add x86_64-pc-windows-gnu &&
          rustup target add x86_64-linux-android &&
          rustup target add x86_64-fuchsia &&
          pushd crates/sled      && cargo check --target aarch64-fuchsia && popd &&
          pushd crates/sled      && cargo check --target aarch64-linux-android && popd &&
          pushd crates/sled      && cargo check --target i686-linux-android && popd &&
          pushd crates/sled      && cargo check --target i686-unknown-linux-gnu && popd &&
          pushd crates/sled      && cargo check --target x86_64-pc-windows-gnu  && popd &&
          pushd crates/sled      && cargo check --target x86_64-linux-android  && popd &&
          pushd crates/sled      && cargo check --target x86_64-fuchsia && popd &&
          pushd crates/pagecache && cargo check --target aarch64-fuchsia && popd &&
          pushd crates/pagecache && cargo check --target aarch64-linux-android && popd &&
          pushd crates/pagecache && cargo check --target i686-linux-android && popd &&
          pushd crates/pagecache && cargo check --target i686-unknown-linux-gnu && popd &&
          pushd crates/pagecache && cargo check --target x86_64-pc-windows-gnu  && popd &&
          pushd crates/pagecache && cargo check --target x86_64-linux-android && popd &&
          pushd crates/pagecache && cargo check --target x86_64-fuchsia && popd

  sanitizers:
    name: Sanitizers
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - run: |
          rustup toolchain install nightly &&
          rustup default nightly &&
          pushd benchmarks/stress2 &&
          echo "lsan" &&
          cargo clean &&
          export RUSTFLAGS="-Z sanitizer=leak" &&
          cargo build --features=lock_free_delays,no_jemalloc --target x86_64-unknown-linux-gnu &&
          sudo rm -rf default.sled &&
          sudo target/x86_64-unknown-linux-gnu/debug/stress2 --duration=30 &&
          sudo target/x86_64-unknown-linux-gnu/debug/stress2 --duration=6 &&
          echo "asan" &&
          cargo clean &&
          export RUSTFLAGS="-Z sanitizer=address" &&
          export ASAN_OPTIONS="detect_odr_violation=0" &&
          cargo build --features=lock_free_delays,no_jemalloc --target x86_64-unknown-linux-gnu &&
          sudo rm -rf default.sled &&
          sudo target/x86_64-unknown-linux-gnu/debug/stress2 --duration=30 &&
          sudo target/x86_64-unknown-linux-gnu/debug/stress2 --duration=6 &&
          unset ASAN_OPTIONS &&
          echo "tsan" &&
          cargo clean &&
          export RUSTFLAGS="-Z sanitizer=thread" &&
          export TSAN_OPTIONS=suppressions=$(Agent.BuildDirectory)/s/tsan_suppressions.txt &&
          sudo rm -rf default.sled &&
          cargo run --features=lock_free_delays,no_jemalloc --target x86_64-unknown-linux-gnu -- --duration=30 &&
          cargo run --features=lock_free_delays,no_jemalloc --target x86_64-unknown-linux-gnu -- --duration=6 &&
          unset RUSTFLAGS &&
          unset TSAN_OPTIONS &&
          rustup default stable
