name: Rust

on: [push]
  
jobs:
  check:
    name: Cargo Check on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
        
    steps:
    - name: cargo check
      run: cargo check
        
  test:
    strategy:
      matrix:
        windows-stable:
          runs-on: 'windows-latest'
          rustup_toolchain: stable
        mac-stable:
          runs-on: 'macos-latest'
          rustup_toolchain: stable
        linux-stable:
          runs-on: 'ubuntu-latest'
          rustup_toolchain: stable
        doctests:
          runs-on: 'ubuntu-latest'
          rustup_toolchain: stable
          testKind: 'doctests'
        sanitizers:
          runs-on: 'ubuntu-latest'
          rustup_toolchain: nightly
          testKind: 'sanitizers'
        cross-compile:
          runs-on: 'ubuntu-latest'
          rustup_toolchain: nightly
          testKind: 'cross-compile'

    steps:
      - run: |
          curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain $RUSTUP_TOOLCHAIN
          echo "##vso[task.setvariable variable=PATH;]$PATH:$HOME/.cargo/bin"
        name: Install rust
        if: ne( variables['Agent.OS'], 'Windows_NT' )
      - run: |
          curl -sSf -o rustup-init.exe https://win.rustup.rs
          rustup-init.exe -y --default-toolchain %RUSTUP_TOOLCHAIN%
          echo "##vso[task.setvariable variable=PATH;]%PATH%;%USERPROFILE%\.cargo\bin"
        name: Windows install rust
        if: eq( variables['Agent.OS'], 'Windows_NT' )
      - run: cargo build --all --release
        name: Cargo build
        if: eq( variables['testKind'], 'default' )
      - run: cargo test --all --release
        name: Cargo test
        if: eq( variables['testKind'], 'default' )
      - run: |
          pushd examples/playground &&
          cargo check &&
          popd &&
          pushd examples/crdt_merge_store &&
          cargo check &&
          popd &&
          pushd crates/sled &&
          echo "testing sled doctests" &&
          cargo test &&
          popd &&
          pushd crates/pagecache &&
          echo "testing pagecache doctests" &&
          cargo test
        name: doctests
        if: eq( variables['testKind'], 'doctests' )
      - run: |
          echo "cross build" &&
          echo "https://github.com/rust-lang/cargo/issues/4753" &&
          rustup target add aarch64-fuchsia &&
          rustup target add aarch64-linux-android &&
          rustup target add i686-linux-android &&
          rustup target add i686-unknown-linux-gnu &&
          rustup target add x86_64-pc-windows-gnu &&
          rustup target add x86_64-linux-android &&
          rustup target add x86_64-fuchsia &&
          pushd crates/sled      && cargo check --target aarch64-fuchsia && popd &&
          pushd crates/sled      && cargo check --target aarch64-linux-android && popd &&
          pushd crates/sled      && cargo check --target i686-linux-android && popd &&
          pushd crates/sled      && cargo check --target i686-unknown-linux-gnu && popd &&
          pushd crates/sled      && cargo check --target x86_64-pc-windows-gnu  && popd &&
          pushd crates/sled      && cargo check --target x86_64-linux-android  && popd &&
          pushd crates/sled      && cargo check --target x86_64-fuchsia && popd &&
          pushd crates/pagecache && cargo check --target aarch64-fuchsia && popd &&
          pushd crates/pagecache && cargo check --target aarch64-linux-android && popd &&
          pushd crates/pagecache && cargo check --target i686-linux-android && popd &&
          pushd crates/pagecache && cargo check --target i686-unknown-linux-gnu && popd &&
          pushd crates/pagecache && cargo check --target x86_64-pc-windows-gnu  && popd &&
          pushd crates/pagecache && cargo check --target x86_64-linux-android && popd &&
          pushd crates/pagecache && cargo check --target x86_64-fuchsia && popd
        name: cross-build
        if: eq( variables['testKind'], 'cross-compile' )
      - run: |
          pushd benchmarks/stress2 &&
          echo "lsan" &&
          cargo clean &&
          export RUSTFLAGS="-Z sanitizer=leak" &&
          cargo build --features=lock_free_delays,no_jemalloc --target x86_64-unknown-linux-gnu &&
          sudo rm -rf default.sled &&
          sudo target/x86_64-unknown-linux-gnu/debug/stress2 --duration=30 &&
          sudo target/x86_64-unknown-linux-gnu/debug/stress2 --duration=6 &&
          echo "asan" &&
          cargo clean &&
          export RUSTFLAGS="-Z sanitizer=address" &&
          export ASAN_OPTIONS="detect_odr_violation=0" &&
          cargo build --features=lock_free_delays,no_jemalloc --target x86_64-unknown-linux-gnu &&
          sudo rm -rf default.sled &&
          sudo target/x86_64-unknown-linux-gnu/debug/stress2 --duration=30 &&
          sudo target/x86_64-unknown-linux-gnu/debug/stress2 --duration=6 &&
          unset ASAN_OPTIONS &&
          echo "tsan" &&
          cargo clean &&
          export RUSTFLAGS="-Z sanitizer=thread" &&
          export TSAN_OPTIONS=suppressions=$(Agent.BuildDirectory)/s/tsan_suppressions.txt &&
          sudo rm -rf default.sled &&
          cargo run --features=lock_free_delays,no_jemalloc --target x86_64-unknown-linux-gnu -- --duration=30 &&
          cargo run --features=lock_free_delays,no_jemalloc --target x86_64-unknown-linux-gnu -- --duration=6 &&
          unset RUSTFLAGS &&
          unset TSAN_OPTIONS
        name: sanitizers
        if: eq( variables['testKind'], 'sanitizers' )
